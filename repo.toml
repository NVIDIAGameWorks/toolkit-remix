########################################################################################################################
# Repo tool base settings
########################################################################################################################

[repo]
logging = "warn"

# Use Kit Template repo configuration as a base. Only override things specific to the repo.
import_configs = [
    "${root}/_repo/deps/repo_kit_tools/kit-template/repo.toml",
    "${root}/repo_public.toml"
]
import_optional_configs = [
    "${root}/repo_internal.toml"
]

# Reposiory Name. It is used for solution name and final package name
name = "rtx_remix"

########################################################################################################################
# Test Runner
########################################################################################################################

# Run all test suites
[repo_test.suites.alltests]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.alltests.group]]
# Run all test
include = ["tests-lightspeed.*${shell_ext}", "tests-omni.flux.*${shell_ext}"]
exclude = []
"platform:linux-x86_64".include = [  # we only test pip archive for linux
    "tests-lightspeed.pip_archive${shell_ext}",
    "tests-omni.flux.pip_archive${shell_ext}",
    "tests-omni.flux.internal_pip_archive${shell_ext}",
]
"platform:linux-x86_64".exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 1800

# Run lightspeed linux unit test suite
[repo_test.suites.lss_unit_linux]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.lss_unit_linux.group]]
include = [
    "tests-lightspeed.*${shell_ext}",
]
exclude = []
"platform:linux-x86_64".include = [  # we only test pip archive for linux
    "tests-lightspeed.pip_archive${shell_ext}",
]
"platform:linux-x86_64".exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='lightspeed.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 300

# Run flux linux unit test suite
[repo_test.suites.flux_unit_linux]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.flux_unit_linux.group]]
include = [
    "tests-omni.flux.*${shell_ext}",
]
exclude = []
"platform:linux-x86_64".include = [  # we only test pip archive for linux
    "tests-omni.flux.pip_archive${shell_ext}",
    "tests-omni.flux.internal_pip_archive${shell_ext}",
]
"platform:linux-x86_64".exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='omni.flux.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 300

# Run lightspeed unit test suite, names starting with a-o
[repo_test.suites.lss_unit_a2o]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.lss_unit_a2o.group]]
include = [
    "tests-lightspeed.[a-o]*${shell_ext}",
]
exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='lightspeed.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 900

# Run flux unit test suite, names starting with a-o
[repo_test.suites.flux_unit_a2o]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.flux_unit_a2o.group]]
include = [
    "tests-omni.flux.[a-o]*${shell_ext}",
]
exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='omni.flux.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 900

# Run lightspeed unit test suite, names starting with p-z
[repo_test.suites.lss_unit_p2z]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.lss_unit_p2z.group]]
include = [
    "tests-lightspeed.[p-z]*${shell_ext}",
]
exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='lightspeed.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 900

# Run flux unit test suite, names starting with p-z
[repo_test.suites.flux_unit_p2z]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.flux_unit_p2z.group]]
include = [
    "tests-omni.flux.[p-z]*${shell_ext}",
]
exclude = []
args = [
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='omni.flux.*.tests.unit.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 900

# Run lightspeed end-to-end test suite, names starting with a-s
[repo_test.suites.lss_e2e_a2s]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.lss_e2e_a2s.group]]
include = [
    "tests-lightspeed.[a-s]*${shell_ext}",
    "tests-lightspeed.trex.[a-p]*${shell_ext}",  # trex is so common, we have to split it
]
exclude = []
"platform:linux-x86_64".include = ["tests-lightspeed.pip_archive${shell_ext}"]  # we only test pip archive for linux
"platform:linux-x86_64".exclude = []
args = [
    "-n", "default",  # skip startup tests for e2e, they will run in unit
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='lightspeed.*.tests.e2e.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 1800

# Run flux end-to-end test suite, names starting with a-s
[repo_test.suites.flux_e2e_a2s]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.flux_e2e_a2s.group]]
include = [
    "tests-omni.flux.[a-s]*${shell_ext}",
]
exclude = []
"platform:linux-x86_64".include = [
    "tests-omni.flux.pip_archive${shell_ext}",
    "tests-omni.flux.internal_pip_archive${shell_ext}",
]  # we only test pip archive for linux
"platform:linux-x86_64".exclude = []
args = [
    "-n", "default",  # skip startup tests for e2e, they will run in unit
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='omni.flux.*.tests.e2e.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 1800

# Run lightspeed end-to-end test suite, names starting with t-z
[repo_test.suites.lss_e2e_t2z]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.lss_e2e_t2z.group]]
include = [
    "tests-lightspeed.[t-z]*${shell_ext}",
]
serial = [
    "tests-lightspeed.trex.viewports.shared.widget${shell_ext}",
]
exclude = [
    "tests-lightspeed.trex.[a-p]*${shell_ext}",  # trex is so common, we have to split it (these are run in a2s above)
    "tests-lightspeed.trex.viewports.manipulators${shell_ext}", # TODO: need to fix test
]
"platform:linux-x86_64".include = ["tests-lightspeed.pip_archive${shell_ext}"]  # we only test pip archive for linux
"platform:linux-x86_64".exclude = []
args = [
    "-n", "default",  # skip startup tests for e2e, they will run in unit
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='lightspeed.*.tests.e2e.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 1800

# Run end-to-end test suite, names starting with t-z
[repo_test.suites.flux_e2e_t2z]
kind = "glob_and_exec"
path = "${test_root}"

[[repo_test.suites.flux_e2e_t2z.group]]
include = [
    "tests-omni.flux.[t-z]*${shell_ext}",
]
exclude = []
"platform:linux-x86_64".include = [
    "tests-omni.flux.pip_archive${shell_ext}",
    "tests-omni.flux.internal_pip_archive${shell_ext}",
]  # we only test pip archive for linux
"platform:linux-x86_64".exclude = []
args = [
    "-n", "default",  # skip startup tests for e2e, they will run in unit
    "--portable", "--portable-root", "${root}/portable",
    "--/exts/omni.kit.test/runTestsFilter='omni.flux.*.tests.e2e.*'",
    "--/exts/omni.kit.test/testExtCodeChangeAnalyzerEnabled=False",
    "--/exts/omni.kit.test/testExtRetryStrategy='retry-on-failure'",
    "--/exts/omni.kit.test/testExtMaxTestRunCount=3",
    "--",  # Every parameter after will be passed directly to each extension tests as parameters
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=svc-kit-extension-viewer:Trgkyw25PB6SFLV9MaACfp",
    "--no-window",
]
timeout = 1800

########################################################################################################################
# Packaging
########################################################################################################################

[repo_package]

[repo_package.packages.main_package]

archive_format = "zip"
replace_authors_in_kit_extensions = true
strip_package_infos = true
exclude_kit_extensions_for_thin_packaging = false

windows_max_path_length = 240

# temp for fat packaging and enterprise builds until pipeline changes are complete: @gamato
files_exclude = [
    ["**/*.pdb"],
    ["**/*.exp"],
    # ["kit/**"],
    ["baseapp/**"],
    ["extsbuild/**"],
    ["cache/**"],
    ["data/**"],
    ["logs/**"],
    ["apps/kit.portable"],
]

# package content
release.files = [
    ["**"],
]
release.files_exclude = [
    ["**/*.pdb"],
    ["**/*.exp"],
    # ["kit/**"],
    ["apps/kit.portable"],
]
"linux-x86_64".files_strip = [
    ["**/*.so"],
]
# temp until fix
"linux-x86_64".files_strip_exclude = [
    ["**/*tbb*.so"],
    ["*/pip_prebundle/PIL/*"],
]


#######################################################################################################################
# Section for "pre build", "post build" step configuration.
#######################################################################################################################
[repo_build]

# Build is disabled but pre-build commands are still executed
pre_build.commands = [
    # Generate the stubgen config file
    ["${root}/repo${shell_ext}", "stubgen", "-c", "${config}"],

    # Generate a shortcut to run the Mass Ingestion CLI in LSS
    ["${root}/_build/${platform}/${config}/kit/kit${exe_ext}", "${root}/_build/${platform}/${config}/apps/lightspeed.app.trex.validation_cli_generator.kit", "--no-window", "--/app/extensions/excluded/0='omni.kit.splash' --/app/extensions/excluded/1='omni.kit.window.splash' --/app/settings/persistent=0 --/app/settings/loadUserConfig=0 --/structuredLog/enable=0 --/app/hangDetector/enabled=0 --/crashreporter/skipOldDumpUpload=1 --/app/content/emptyStageOnStart=1", "--/app/file/ignoreUnsavedOnExit=1", "--/app/fastShutdown=1", "--/app/quitAfter=10", "--exec", "${root}/tools/custom/generate_mass_cli.py"],
    ["${root}/_build/${platform}/${config}/kit/kit${exe_ext}", "${root}/_build/${platform}/${config}/apps/omni.flux.app.service.documentation_cli_generator.kit", "--no-window", "--exec", "${root}/tools/custom/generate_app.py -id omni.flux.service.documentation -n omni.flux.app.service.documentation.cli"],
]

[repo_build.fetch.pip]
# List of pip files to pip install from (in order)
files_to_pull = [
    "${root}/deps/pip_flux.toml",
    "${root}/deps/pip_internal.toml",
    "${root}/deps/pip_lss.toml",
]

[repo_build.build]
enabled = false

# Disable linbuild until we have a public image available.
[repo_build.docker]
enabled = false

[repo_stubgen]
exts_exclude = [
    "lightspeed.pip_archive",
    "omni.flux.pip_archive",
    "omni.flux.internal_pip_archive",
]

[repo_build.vscode]
# Fill up 'python.analysis.extraPaths' of .vscode/settings.json file
write_python_paths_in_settings_json = true

# Settings template file to copy from
settings_template_file = "${root}/.vscode/settings.template.json"

########################################################################################################################
# Extensions publisher
########################################################################################################################

[repo_publish_exts]
configs = ["release"]
platforms = ["windows-x86_64"]

# Extensions to publish, include and exclude among those discovered by kit. Wildcards are supported.
exts.include = [
    "lightspeed.*",
    "omni.flux.*",
    "omni.etm.list.lightspeed_rtx",
]
exts."platform:linux-x86_64".include = [
    "lightspeed.pip_archive.*",
    "omni.flux.pip_archive.*",
    "omni.flux.internal_pip_archive.*",
]  # we only test pip archive for linux
exts.exclude = [
    "lightspeed_example.*",
]

# verify before publishing
# skip so that lightspeed.apps can be published without separate changelogs
publish_verification = false

# To be able to publish with an older Kit you can update settings for a publishing tool to set an account from the env
# vars provided by Vault (assuming you use shared CI yml scripts, otherwise update your scripts too):
kit_extra_args = [
    "--/exts/omni.kit.registry.nucleus/accounts/0/read=${env:OMNI_KIT_EXTENSIONS_USERNAME}:${env:OMNI_KIT_EXTENSIONS_KEY}",
    "--/exts/omni.kit.registry.nucleus/accounts/0/write=${env:OMNI_KIT_EXTENSIONS_USERNAME}:${env:OMNI_KIT_EXTENSIONS_KEY}",
]


########################################################################################################################
# Extensions precacher
########################################################################################################################

[repo_precache_exts]
# Apps to run and precache
apps = [
    "${root}/source/apps/lightspeed.app.trex.ingestcraft.kit",
    "${root}/source/apps/lightspeed.app.trex.kit",
    "${root}/source/apps/lightspeed.app.trex.stagecraft.kit",
    "${root}/source/apps/lightspeed.app.trex.texturecraft.kit",
    "${root}/source/apps/lightspeed.app.trex.validation_cli.kit",
    "${root}/source/apps/lightspeed.app.trex.validation_cli_generator.kit",
    "${root}/source/apps/lightspeed.app.trex_dev.kit",
    "${root}/source/apps/lightspeed.hdremix.test.kit",
    "${root}/source/apps/omni.flux.app.service.documentation_cli_generator.kit",
    "${root}/source/extensions/lightspeed.trex.packaging.core/apps/lightspeed.app.trex.project_packaging_cli.kit",
    "${root}/source/extensions/lightspeed.trex.project_wizard.core/apps/lightspeed.app.trex.project_wizard_cli.kit",
    "${root}/source/extensions/omni.flux.asset_importer.core/apps/omni.flux.app.asset_importer_cli.kit",
    "${root}/source/extensions/omni.flux.service.documentation/apps/omni.flux.app.service.documentation_cli.kit",
    "${root}/source/extensions/omni.flux.stage_manager.window/apps/omni.flux.app.stage_manager.kit",
    "${root}/source/extensions/omni.flux.validator.manager.core/apps/omni.flux.app.validator_cli.kit",
    "${root}/source/extensions/omni.flux.validator.manager.window/apps/omni.flux.app.validator.kit",
    "${root}/source/extensions/omni.flux.validator.mass.core/apps/omni.flux.app.validator.mass_cli.kit",
    "${root}/source/extensions/omni.flux.validator.mass.window/apps/omni.flux.app.validator.mass_window.kit",
]
kit_extra_args = [
    "--portable-root",
    "${root}/_build/${platform}/${config}",
    "--/app/extensions/supportedTargets/platform='windows-x86_64'"
]

########################################################################################################################
# Documentation building
########################################################################################################################

[repo_docs]
enabled = true

name = "NVIDIA RTX Remix"
project = "${conf:repo.name}"

# Define the extra content to add to the head of every page
extra_content_head = ["""
<style>
  .svg-icon {
    height: 24px;
    padding: 4px;
    background-color: black !important;
    border-radius: 4px !important;
  }
</style>
"""]

sphinx_conf_py_extra = """
import pathlib
import platform
import shutil
import subprocess

def build_service_docs(app):
    output_dir = pathlib.Path(app.builder.outdir)
    exec_path = output_dir.parent.parent.parent / "${platform}" / source_substitutions.get("repo_docs_config")

    if not (exec_path).exists():
        raise RuntimeError("No Kit build was found.")

    exec_path = exec_path / ("omni.flux.app.service.documentation.cli" + (".bat" if platform.system().lower() == "windows" else ".sh"))
    if not exec_path.exists():
        raise RuntimeError("Service Documentation executable not found.")

    source_file = pathlib.Path.cwd() / "docs" / "howto" / "learning-restapi-docs.html"
    command = [
        str(exec_path),
        "-o", str(source_file),
        "-e", "lightspeed.trex.service.core",
        '-x--/renderer/mdl/searchPaths/templates="${lightspeed.trex.app.resources}/deps/omni_core_materials/Base;${kit}/mdl/core/Base;${kit}/mdl/core/Volume;${kit}/mdl/core/mdl"',
    ]

    print("Generating service documentation")
    print(" ".join(command))

    result = subprocess.run(command, check=True)

    if result.returncode != 0:
        raise RuntimeError("An error occured while generating the Service documentation.")

    output_file = output_dir / "docs" / "howto" / "learning-restapi-docs.html"
    print("Copying generated documentation from", source_file, "to", output_file)

    output_file.parent.mkdir(parents=True)
    shutil.copy2(source_file, output_file)

sphinx_event_handlers = [
    ("builder-inited", build_service_docs),
]

autodoc_pydantic_model_show_json_error_strategy = "coerce"
autodoc_pydantic_settings_show_json_error_strategy = "coerce"

autodoc_default_options = {
    "members": True,
    "undoc-members": True,
    "imported-members": True,
    "show-inheritance": True,
    "exclude-members": '''
        PromptManager,
        PromptButtonInfo,
        create_model,
        BaseModel,
        ConfigDict,
        Field,
        PrivateAttr,
        SkipValidation,
        ValidationInfo,
        ValidationError,
        field_validator,
        model_validator,
        asynccontextmanager,
        contextmanager,
        redirect_stdout,
        ensure_future,
        partial,
        proxy,
        Enum,
        IntEnum,
        Path,
        Generic,
        Number,
        OrderedDict,
        Iterable,
        TypeVar,
        ThreadPoolExecutor
    ''',
}

autodoc_mock_imports = [
    "fastapi",
    "fastmcp",
    "fast_version",
    "pyperclip",
    "pydantic",
    "omni.kit.manipulator",  # uses omni.kit.get_app() at module level
    "omni.kit.viewport.menubar.camera",  # uses carb.tokens.get_tokens_interface() at module level
    "omni.kit.viewport.menubar.render",  # uses carb.tokens.get_tokens_interface() at module level
]

myst_enable_extensions = ["attrs_inline"]
"""

extensions_extra = ["sphinxcontrib.video", "sphinxcontrib.autodoc_pydantic"]

library_paths = [
    # libomniAudioSchema.so: cannot open shared object file: No such file or directory
    "${root}/_build/${platform_target}/release/exts/*/bin",
    "${root}/_build/${platform_target}/release/exts/*/lib",
    "${root}/_build/${platform_target}/release/extscache/*/bin",
    "${root}/_build/${platform_target}/release/extscache/*/lib",
    "${root}/_build/${platform_target}/release/extscache/*/bin/deps",
    "${root}/_build/${platform_target}/release/extscache/*/lib/deps",
    "${root}/_build/${platform_target}/release/kit/exts/*/bin",
    "${root}/_build/${platform_target}/release/kit/exts/*/lib",
    "${root}/_build/${platform_target}/release/kit/exts/*/bin/deps",
    "${root}/_build/${platform_target}/release/kit/exts/*/lib/deps",
    "${root}/_build/${platform_target}/release/kit/extsPhysics/*/bin",
    "${root}/_build/${platform_target}/release/kit/extsPhysics/*/lib",
    "${root}/_build/${platform_target}/release/kit/extscore/*/bin",
    "${root}/_build/${platform_target}/release/kit/extscore/*/lib",
    "${root}/_build/${platform_target}/release/kit/extscore/*/bin/deps",
    "${root}/_build/${platform_target}/release/kit/extscore/*/lib/deps",
    "${root}/_build/${platform_target}/release/kit",
    "${root}/_build/${platform_target}/release/kit/kernel/plugins",
]

sphinx_exclude_patterns = [
    ####################################################################################################################
    # Documentation generation failures
    ####################################################################################################################
    "source/extensions/lightspeed.event.generate_thumbnail*",  # Carb interface is not available
    "source/extensions/lightspeed.event.waypoint_game_camera*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.app.resources*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.app.style*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.control.ingestcraft*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.control.stagecraft*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.layout.*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.stage_manager.plugin.widget.usd*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.viewports.shared.*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.viewports.ingestcraft.bundle*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.viewports.stagecraft.bundle*",  # Carb interface is not available
    "source/extensions/lightspeed.trex.waypoint.core*",  # Carb interface is not available
    ####################################################################################################################
    # Ignore directories
    ####################################################################################################################
    ".cache",
    ".local",
    "_build",
    "include",
    "portable",
    "tools",
    "SECURITY.md",
    "VERSION.md",
    "**/omni-core-materials-LICENSE.md",
    ####################################################################################################################
    # Development READMEs
    ####################################################################################################################
    "docs_dev/*",
    "VERSION.md",
    ".github/workflows/cla/*",
]

redirects = [
    { path = "docs/contributing.html", target = "docs/contributing/api.html" },
    { path = "docs/howto/learning-overview.html", target = "docs/gettingstarted/learning-runtimesetup.html" },
    { path = "docs/howto/learning-properties.html", target = "docs/howto/learning-toolkit.html" },
    { path = "docs/howto/learning-runtimesetup.html", target = "docs/gettingstarted/learning-runtimesetup.html" },
    { path = "docs/howto/learning-viewport.html", target = "docs/toolkitinterface/remix-toolkitinterface-viewport.html" },
    { path = "docs/howto/tutorial-portalhl2.html", target = "docs/tutorials/tutorial-portalhl2.html" },
    { path = "docs/howto/tutorial-remixtool.html", target = "docs/tutorials/tutorial-remixtool.html" },
    { path = "docs/remix-changelog.html", target = "docs/changelog/remix-releasenotes.html" },
    { path = "docs/remix-formats.html", target = "docs/howto/learning-ingestion.html#file-format-compatibility" },
    { path = "docs/remix-full-changelog.html", target = "docs/changelog/remix-full-changelog.html" },
    { path = "docs/remix-installation.html", target = "docs/installation/install-selection.html" },
    { path = "docs/remix-overview.html", target = "docs/introduction/intro-overview.html" },
    { path = "docs/remix-releasenotes.html", target = "docs/changelog/remix-releasenotes.html" },
    { path = "docs/toolkitinterface/remix-toolkitinterface-migrations.html", target = "docs/howto/learning-migrations.html" },
    { path = "docs/toolkitinterface/remix-toolkitinterface-restapi-docs.html", target = "docs/howto/learning-restapi-docs.html" },
    { path = "docs/toolkitinterface/remix-toolkitinterface-restapi.html", target = "docs/howto/learning-restapi.html" },
]

repo_url = "https://gitlab-master.nvidia.com/lightspeedrtx/lightspeed-kit/-/blob/master"

enable_dark_theme_switcher = true

########################################################################################################################
# Code Format Tool
########################################################################################################################

# C++ is formatted with clang-format:
[repo_format.cpp]
files.include = ["**"]
files.exclude = [
    ".eggs/*",
    ".git/*",
    ".teamcity/*",
    ".venv/*",
    ".vscode/*",
    "PACKAGE-DEPS.yaml",
    "_build/*",
    "_compiler/*",
    "_repo/*",
    "_testoutput/*",
    "backup.teamcity/*",
    "portable/*",
    "source/extensions/example.*",
    "source/extensions/lightspeed.common/lightspeed/common/tools/*",
    "source/extensions/lightspeed.hydra.remix/plugin/usd/usd/resources/codegenTemplates/*",
    "source/pythonapps/*",
    "tools/*",
    "venv/*",
]

# python is formatted with black+isort:
[repo_format.python]
files.include = ["**/*.py"]
files.exclude = [
    ".eggs/*",
    ".git/*",
    ".teamcity/*",
    ".venv/*",
    ".vscode/*",
    "PACKAGE-DEPS.yaml",
    "_build/*",
    "_compiler/*",
    "_repo/*",
    "_testoutput/*",
    "backup.teamcity/*",
    "portable/*",
    "source/extensions/example.*",
    "source/extensions/lightspeed.hydra.remix/plugin/usd/usd/resources/codegenTemplates/*",
    "source/pythonapps/*",
    "tools/*",
    "venv/*",
]
python_version = "py310"
job_count = 1

########################################################################################################################
# Python lint tool
########################################################################################################################

[repo_lint.flake8]
files.include = ["**/*.py"]
files.exclude = [
    ".eggs/*",
    ".git/*",
    ".teamcity/*",
    ".venv/*",
    ".vscode/*",
    "PACKAGE-DEPS.yaml",
    "_build/*",
    "_compiler/*",
    "_repo/*",
    "_testoutput/*",
    "backup.teamcity/*",
    "portable/*",
    "source/extensions/example.*",
    "source/extensions/lightspeed.hydra.remix/plugin/usd/usd/resources/codegenTemplates/*",
    "source/pythonapps/*",
    "tools/*",
    "venv/*",
]

########################################################################################################################
# Launcher publish and deploy
########################################################################################################################

[repo_deploy_launcher]
enabled = true
git_url = "${env:TREX_RELEASE_URL_AND_TOKEN}"

########################################################################################################################
# Check test file locations
########################################################################################################################

[repo_check_test_file_location]
start_path = "source\\"
required_paths = ["/unit/", "/e2e/"]
# Any path containing any of the 'ignore' strings will be skipped
ignore = ["extensions/lightspeed.common/lightspeed/common/tools"]

########################################################################################################################
# Repo CI Jobs
########################################################################################################################
[repo_ci]

[repo_ci.jobs."publish_etm_list"]
script = "${root}/tools/ci/scripts/publish_etm_list.py"
