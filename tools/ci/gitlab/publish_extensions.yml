include:
  - project: 'omniverse/sectools/vault'
    file: '/templates/v2/omni-packman-s3-creds.yml'
  - project: 'omniverse/sectools/vault'
    file: '/templates/v2/omni-codesign-creds.yml'
  # ^^^ includes above are needed for the vault invocation.

build-publish-win:
  interruptible: true
  allow_failure: false
  stage: build_doc_publish
  before_script:
    - If (Test-Path ".\portable\"){ Remove-Item ".\portable\" -Recurse -Force }
    - .\build.bat --clean --release
  script:
    - .\build.bat --config release
    - .\repo.bat publish_exts --verify
    - .\repo.bat package --mode main_package --platform windows-x86_64 --config release
    - echo ARTEFACT_WIN_JOB_ID=$env:CI_JOB_ID >> gitlab_release_win.env
    - echo (Get-ChildItem  -Filter "_build/packages/*.release.zip" -Force | ForEach-Object {"ARTEFACT_WIN_ZIP_NAME=$_"}) > gitlab_release_win.env
  # Artifacts required to make the publishing step work
  artifacts:
    when: on_success
    paths:
    - _build/packages/*
    - _build/**/*.log
    - _repo/*.log
    reports:
      # To ensure we've access to this file in the next stage
      dotenv: gitlab_release_win.env
  rules:
    ## Automatically run publish job only on merge commit to master
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never


build-publish-linux:
  interruptible: true
  allow_failure: false
  stage: build_doc_publish
  tags:
    - linux
  before_script:
    - ./build.sh --clean --release
  script:
    - ./build.sh --config release
    - ./repo.sh publish_exts --verify
    - ./repo.sh package --mode main_package --platform linux-x86_64 --config release
    - echo ARTEFACT_LINUX_JOB_ID=$CI_JOB_ID >> gitlab_release_linux.env
    - echo (Get-ChildItem  -Filter "_build/packages/*.release.zip" -Force | ForEach-Object {"ARTEFACT_LINUX_ZIP_NAME=$_"}) > gitlab_release_linux.env
  # Artifacts required to make the publishing step work
  artifacts:
    when: on_success
    paths:
    - _build/packages/*
    - _build/**/*.log
    - _repo/*.log
    reports:
      # To ensure we've access to this file in the next stage
      dotenv: gitlab_release_linux.env
  rules:
    ## Automatically run publish job only on merge commit to master
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never



publish-extensions:
  stage: build_doc_publish
  interruptible: true
  allow_failure: false
  tags:
    - linux
  needs:
    - job: build-publish-win
      artifacts: true
    - job: build-publish-linux
      artifacts: true
  script:
    - set -eu
    - |
      mkdir tempbin
      curl -fsSL https://urm.nvidia.com/artifactory/sw-kaizen-data-generic/com/nvidia/vault/vault-agent/1.5.2/nvidia_vault_agent_v1.5.2_linux_amd64.zip \
      | bsdtar -xvf- -C tempbin
      chmod +x tempbin/vault
      export PATH="$PWD/tempbin:$PATH"
    - !reference [.omni_codesign_get_secrets, omni_codesign_get_secrets]
    - !reference [.omni_s3_write_get_secrets, omni_s3_write_get_secrets]
    - ./build.sh --fetch-only --release --no-docker
    - fail_wr=0
    - ./repo.sh ci publish_extensions || fail_wr=1
    - echo "WinRel=${fail_wr}"
    - '[ "$fail_wr" -eq 0 ] || exit 1'
  variables:
    GIT_STRATEGY: fetch
  rules:
    ## Automatically run publish job only on merge commit to master
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never


publish-gitlab_release:
  interruptible: true
  allow_failure: false
  stage: build_doc_publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build-publish-win
      artifacts: true
    - job: build-publish-linux
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: always                                 # Run this job when a tag is created manually
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
      when: manual
    - when: never

  script:
    - echo "running release_job for $env:TAG"
    - echo "getting window artefact from job for $env:ARTEFACT_WIN_JOB_ID"
    - echo "getting linux artefact from job for $env:ARTEFACT_LINUX_JOB_ID"
    - echo "grabbing zip file $env:ARTEFACT_WIN_ZIP_NAME and $env:ARTEFACT_LINUX_ZIP_NAME"
    - .\repo.bat check_changelog -s _current_changelog.md
  release: # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    name: "$CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: _current_changelog.md
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: 'windows-x86_64.release'
          url: 'https://$CI_SERVER_HOST/$CI_PROJECT_PATH/-/jobs/$ARTEFACT_WIN_JOB_ID/artifacts/file/_build/packages/$ARTEFACT_WIN_ZIP_NAME'
          link_type: 'package' # optional
        - name: 'linux-x86_64.release'
          url: 'https://$CI_SERVER_HOST/$CI_PROJECT_PATH/-/jobs/$ARTEFACT_LINUX_JOB_ID/artifacts/file/_build/packages/$ARTEFACT_LINUX_JOB_ID'
          link_type: 'package' # optional


