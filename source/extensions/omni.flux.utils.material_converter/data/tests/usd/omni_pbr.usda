#usda 1.0
(
    defaultPrim = "World"
    metersPerUnit = 1.0
    upAxis = "Y"
)

def Xform "World" (
    kind = "component"
)
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "M_Fixture_Elevator_Interior_02"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_02/M_Fixture_Elevator_Interior_02.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_02/M_Fixture_Elevator_Interior_02.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_02/M_Fixture_Elevator_Interior_02.outputs:out>

            def Shader "M_Fixture_Elevator_Interior_02"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                )
                asset inputs:diffuse_texture = @./textures/T_Fixture_Elevator_Interior_02_Albedo.png@ (
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                )
                color3f inputs:emissive_color = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                )
                float inputs:emissive_intensity = 10000 (
                    customData = {
                        float default = 10000
                        dictionary range = {
                            float max = 100000
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                )
                asset inputs:normalmap_texture = @./textures/T_Fixture_Elevator_Interior_02_Normal.png@ (
                    colorSpace = "raw"
                    displayGroup = "Normal"
                    displayName = "Normal map"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                )
                asset inputs:reflectionroughness_texture = @./textures/T_Fixture_Elevator_Interior_02_Rough.png@ (
                    colorSpace = "raw"
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 360
                            float min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                )
                token outputs:out
            }
        }

        def Material "M_Fixture_Elevator_Interior_Glass"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/M_Fixture_Elevator_Interior_Glass.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/M_Fixture_Elevator_Interior_Glass.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/M_Fixture_Elevator_Interior_Glass.outputs:out>

            def Shader "M_Fixture_Elevator_Interior_Glass"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                )
                color3f inputs:emissive_color = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                )
                float inputs:emissive_intensity = 10000 (
                    customData = {
                        float default = 10000
                        dictionary range = {
                            float max = 100000
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 360
                            float min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                )
                token outputs:out
            }
        }

        def Material "M_Fixture_Elevator_Interior_01"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_01/M_Fixture_Elevator_Interior_01.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_01/M_Fixture_Elevator_Interior_01.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_01/M_Fixture_Elevator_Interior_01.outputs:out>

            def Shader "M_Fixture_Elevator_Interior_01"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                )
                asset inputs:diffuse_texture = @./textures/T_Fixture_Elevator_Interior_01_Albedo.png@ (
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                )
                color3f inputs:emissive_color = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                )
                float inputs:emissive_intensity = 10000 (
                    customData = {
                        float default = 10000
                        dictionary range = {
                            float max = 100000
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                )
                asset inputs:normalmap_texture = @./textures/T_Fixture_Elevator_Interior_01_Normal.png@ (
                    colorSpace = "raw"
                    displayGroup = "Normal"
                    displayName = "Normal map"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                )
                asset inputs:reflectionroughness_texture = @./textures/T_Fixture_Elevator_Interior_01_Rough.png@ (
                    colorSpace = "raw"
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 360
                            float min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                )
                token outputs:out
            }
        }
    }

    def Xform "Xform"
    {
        def Mesh "Mesh"
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            point3f[] points = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1), (1, 0, 0), (2, 0, 0), (2, 1, 0), (1, 1, 0), (1, 0, 1), (2, 0, 1), (2, 1, 1), (1, 1, 1), (2, 0, 0), (3, 0, 0), (3, 1, 0), (2, 1, 0), (2, 0, 1), (3, 0, 1), (3, 1, 1), (2, 1, 1)]
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (10, 10, 10)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def GeomSubset "GeomSubset1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [0, 1, 2, 3]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def GeomSubset "GeomSubset2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [4, 5, 6, 7]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_02> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def GeomSubset "GeomSubset3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [8, 9, 10, 11]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }
}
