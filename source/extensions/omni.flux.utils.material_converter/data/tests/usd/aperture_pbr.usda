#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    kind = "component"
)
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "M_Fixture_Elevator_Interior_02"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_02/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_02/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_02/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
                asset inputs:diffuse_texture = @./textures/T_Fixture_Elevator_Interior_02_Albedo.png@
                color3f inputs:emissive_color_constant = (1, 1, 1)
                float inputs:emissive_intensity = 10000
                bool inputs:enable_emission = 0
                int inputs:encoding = 2
                asset inputs:normalmap_texture = @./textures/T_Fixture_Elevator_Interior_02_Normal.png@
                float inputs:opacity_constant = 1
                asset inputs:reflectionroughness_texture = @./textures/T_Fixture_Elevator_Interior_02_Rough.png@
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "M_Fixture_Elevator_Interior_Glass"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_Glass/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
                color3f inputs:emissive_color_constant = (1, 1, 1)
                float inputs:emissive_intensity = 10000
                bool inputs:enable_emission = 0
                int inputs:encoding = 2
                float inputs:opacity_constant = 1
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "M_Fixture_Elevator_Interior_01"
        {
            token outputs:mdl:displacement.connect = </World/Looks/M_Fixture_Elevator_Interior_01/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/M_Fixture_Elevator_Interior_01/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/M_Fixture_Elevator_Interior_01/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
                asset inputs:diffuse_texture = @./textures/T_Fixture_Elevator_Interior_01_Albedo.png@
                color3f inputs:emissive_color_constant = (1, 1, 1)
                float inputs:emissive_intensity = 10000
                bool inputs:enable_emission = 0
                int inputs:encoding = 2
                asset inputs:normalmap_texture = @./textures/T_Fixture_Elevator_Interior_01_Normal.png@
                float inputs:opacity_constant = 1
                asset inputs:reflectionroughness_texture = @./textures/T_Fixture_Elevator_Interior_01_Rough.png@
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Xform "Xform"
    {
        def Mesh "Mesh"
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            point3f[] points = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1), (1, 0, 0), (2, 0, 0), (2, 1, 0), (1, 1, 0), (1, 0, 1), (2, 0, 1), (2, 1, 1), (1, 1, 1), (2, 0, 0), (3, 0, 0), (3, 1, 0), (2, 1, 0), (2, 0, 1), (3, 0, 1), (3, 1, 1), (2, 1, 1)]
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (10, 10, 10)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def GeomSubset "GeomSubset1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [0, 1, 2, 3]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_01> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def GeomSubset "GeomSubset2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [4, 5, 6, 7]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_02> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def GeomSubset "GeomSubset3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                int[] indices = [8, 9, 10, 11]
                rel material:binding = </World/Looks/M_Fixture_Elevator_Interior_Glass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }
}

