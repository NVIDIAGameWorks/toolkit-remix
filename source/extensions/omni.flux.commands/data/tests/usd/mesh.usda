#usda 1.0
(
    customLayerData = {
        dictionary renderSettings = {
        }
    }
    defaultPrim = "ReferenceTarget"
    doc = "Blender v3.2.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "ReferenceTarget" (
    kind = "group"
)
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Xform "XForms" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "Cube"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "Cube"
            {
                uniform bool doubleSided = 1
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 3, 2, 6, 7, 7, 6, 4, 5, 5, 1, 3, 7, 1, 0, 2, 3, 5, 4, 0, 1]
                rel material:binding = </ReferenceTarget/XForms/Cube/OmniPBR> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(1, 1, 1), (1, 1, -1), (1, -1, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
                texCoord2f[] primvars:UVMap = [(0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }

            def Material "OmniPBR"
            {
                token outputs:mdl:displacement.connect = </ReferenceTarget/XForms/Cube/OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </ReferenceTarget/XForms/Cube/OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </ReferenceTarget/XForms/Cube/OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    int inputs:encoding = 2
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }
    }
}
