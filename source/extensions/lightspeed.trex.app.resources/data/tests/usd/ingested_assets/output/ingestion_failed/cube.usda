#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.00000397803842133726, 0.000007956076785831101, -0.000003978038307650422)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            uint64 ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "Root"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Y"
)

def Xform "Root"
{
    def Mesh "Toto"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
        float2[] invertedUvs = [(0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0), (0, -1), (0, -0), (1, -0), (1, -1), (0, -0), (1, -0), (1, -1), (0, -1), (0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0)]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "vertex"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (50, 50, 50), (-50, 50, 50), (-50, -50, -50), (-50, 50, -50), (50, 50, -50), (50, -50, -50), (-50, 50, -50), (-50, 50, 50), (50, 50, 50), (50, 50, -50), (-50, -50, -50), (50, -50, -50), (50, -50, 50), (-50, -50, 50), (-50, -50, -50), (-50, -50, 50), (-50, 50, 50), (-50, 50, -50), (50, -50, -50), (50, 50, -50), (50, 50, 50), (50, -50, 50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube_01"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
        float2[] invertedUvs = [(0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0), (0, -1), (0, -0), (1, -0), (1, -1), (0, -0), (1, -0), (1, -1), (0, -1), (0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0)]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "vertex"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (50, 50, 50), (-50, 50, 50), (-50, -50, -50), (-50, 50, -50), (50, 50, -50), (50, -50, -50), (-50, 50, -50), (-50, 50, 50), (50, 50, 50), (50, 50, -50), (-50, -50, -50), (50, -50, -50), (50, -50, 50), (-50, -50, 50), (-50, -50, -50), (-50, -50, 50), (-50, 50, 50), (-50, 50, -50), (50, -50, -50), (50, 50, -50), (50, 50, 50), (50, -50, 50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube_02"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
        float2[] invertedUvs = [(0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0), (0, -1), (0, -0), (1, -0), (1, -1), (0, -0), (1, -0), (1, -1), (0, -1), (0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0)]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "vertex"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (50, 50, 50), (-50, 50, 50), (-50, -50, -50), (-50, 50, -50), (50, 50, -50), (50, -50, -50), (-50, 50, -50), (-50, 50, 50), (50, 50, 50), (50, 50, -50), (-50, -50, -50), (50, -50, -50), (50, -50, 50), (-50, -50, 50), (-50, -50, -50), (-50, -50, 50), (-50, 50, 50), (-50, 50, -50), (50, -50, -50), (50, 50, -50), (50, 50, 50), (50, -50, 50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Mesh "Cube_03"
    {
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
        float2[] invertedUvs = [(0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0), (0, -1), (0, -0), (1, -0), (1, -1), (0, -0), (1, -0), (1, -1), (0, -1), (0, -0), (1, -0), (1, -1), (0, -1), (1, -0), (1, -1), (0, -1), (0, -0)]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "vertex"
        )
        point3f[] points = [(-50, -50, 50), (50, -50, 50), (50, 50, 50), (-50, 50, 50), (-50, -50, -50), (-50, 50, -50), (50, 50, -50), (50, -50, -50), (-50, 50, -50), (-50, 50, 50), (50, 50, 50), (50, 50, -50), (-50, -50, -50), (50, -50, -50), (50, -50, 50), (-50, -50, 50), (-50, -50, -50), (-50, -50, 50), (-50, 50, 50), (-50, 50, -50), (50, -50, -50), (50, 50, -50), (50, 50, 50), (50, -50, 50)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
            interpolation = "vertex"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def "Environment"
{
    custom string ground:type = "Off"
}

