#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            dictionary Perspective = {
                double3 position = (-658.2662365206795, 798.0399310353307, 682.1763264578069)
                double radius = 1131.7878009131487
                double3 target = (37.96809530330563, -174.27470765047212, -68.7778266023713)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            dictionary Top = {
                double3 position = (-8.11833802720775e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./BuiltInMaterials.usda"
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            string "rtx:rendermode" = "PathTracing"
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 0.009999999776482582
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
        kind = "model"
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float3 xformOp:rotateZYX = (315, 0, 0)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]
    }

    def Scope "Looks" (
        kind = "model"
    )
    {
        def Material "AperturePBR_Opacity"
        {
            rel material:binding = </World/Looks/AperturePBR_Translucent> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token outputs:mdl:displacement.connect = </World/Looks/AperturePBR_Opacity/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/AperturePBR_Opacity/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/AperturePBR_Opacity/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "AperturePBR_Translucent"
        {
            token outputs:mdl:displacement.connect = </World/Looks/AperturePBR_Translucent/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/AperturePBR_Translucent/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/AperturePBR_Translucent/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "AperturePBR_Opacity_01"
        {
            rel material:binding = </World/Looks/AperturePBR_Translucent> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token outputs:mdl:displacement.connect = </World/Looks/AperturePBR_Opacity_01/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/AperturePBR_Opacity_01/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/AperturePBR_Opacity_01/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                color3f inputs:diffuse_color_constant = (0.980695, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.39999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Cube "Cube_01" (
        kind = "model"
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        rel material:binding = </World/Looks/AperturePBR_Opacity> (
            bindMaterialAs = "strongerThanDescendants"
        )
        double size = 100
        float3 xformOp:rotateZYX = (-0, 0, -0)
        float3 xformOp:scale = (6.813209, 0.170179, 6.813209)
        double3 xformOp:translate = (0, -61.738472, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

    def Sphere "Sphere" (
        kind = "model"
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        rel material:binding = </World/Looks/AperturePBR_Opacity_01> (
            bindMaterialAs = "strongerThanDescendants"
        )
        double radius = 50
        custom bool refinementEnableOverride = 1
        custom int refinementLevel = 2
        float3 xformOp:rotateZYX = (-0, 0, -0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (197.062866, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

    def Sphere "Sphere_02" (
        kind = "model"
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        rel material:binding = </World/Looks/AperturePBR_Translucent> (
            bindMaterialAs = "strongerThanDescendants"
        )
        double radius = 50
        custom bool refinementEnableOverride = 1
        custom int refinementLevel = 2
        float3 xformOp:rotateZYX = (-0, 0, -0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (4.04462, 0, -168.7586)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }
}

